),
coords = coords,
dim = 'XYZ'
)
##############
# Make class
new_sfstep<-
function(data = data.frame(),
proj4 = NA,
time = NA,
id = NA,
burst = NULL,
error = NA,
coords = c('x','y'),
tz = NULL
) {
burst[['id']] <- id
burst_list <- do.call(function(...) mapply(list,...,SIMPLIFY=F), burst)
structure(
sf::st_as_sf(
data.frame(
id = seq_len(nrow(data)),
data,
time_traj = new_time_tj(time,id=id,tz=tz),
burst = make_multi_burst(id=id, burst=burst),
error = error
),
coords = coords,
dim = 'XYZ'
),
projection = proj4,
class = c("sftraj", 'data.frame')
beginning =
end =
)
}
x2 <- rbind(st_point(),data_sf$geometry[subz][2:sum(subz]))
x2 <- rbind(st_point(),data_sf$geometry[subz][2:sum(subz)])
View(x1)
x1[1]
x1[2]
x1[3]
x1[4]
x1[5]
x1[6]
x1[7]
x1[8]
mapply(function(x,y) st_linestring(rbind(x, y)), x1, x2, SIMPLIFY = F)
data$geometry <- mapply(function(x,y) st_linestring(rbind(x, y)), x1[subz], x2[subz], SIMPLIFY = F)
x1[subz]
data_sf$geometry[subz]
1:(sum(subz)-1)
x1 <- rbind(data_sf$geometry[subz][1:(sum(subz)-1)],st_point())
data_sf$geometry[subz][1:(sum(subz)-1)]
1:(sum(subz)-1)
data_sf$geometry[subz]
length(data_sf$geometry[subz])
x1 <- data_sf$geometry[subz]
1:(sum(subz)-1)]
View(x1)
x1 <- data_sf$geometry[subz][1:(sum(subz)-1)]
x1 <- rbind(data_sf$geometry[subz][1:(sum(subz)-1)],st_point())
x1 <- data_sf$geometry[subz][1:(sum(subz)-1)]
View(x1)
rbind(x1, st_point(0,0))
rbind(x1, st_point(c(0,0)))
here <- rbind(x1, st_point(c(0,0)))
View(here)
here <- rbind(x1[1:10], st_point(c(0,0)))
View(here)
x1 <- data_sf$geometry[subz][1:(sum(subz)-1)]
data_sf$geometry[subz][1:(sum(subz)-1)]
rbind(st_point(1,1),st_point(c(0,0)))
rbind(st_point(c(1,1)),st_point(c(0,0)))
rbind(st_point(c(1,1,1)),st_point(c(0,0)))
x1 <- rbind(data_sf$geometry[subz][1:(sum(subz)-1)],st_point(c(0,0)))
x1 <- rbind(data_sf$geometry[subz][1:(sum(subz)-1)],st_point(c(0,0,0)))
st_point(data_sf$geometry[subz][1:(sum(subz)-1)])
c(st_point(0,0), st_point(0,0))
c(st_point(c(0,0)), st_point(c(0,0)))
rbind(st_point(c(0,0)), st_point(c(0,0)))
tt <- rbind(st_point(c(0,0)), st_point(c(0,0)))
View(tt)
tt <- list(st_point(c(0,0)), st_point(c(0,0)))
st_coordinates(data_sf$geometry[subz][1:(sum(subz)-1)])
rbind(st_coordinates(data_sf$geometry[subz][1:(sum(subz)-1)]),c(NA,NA,NA))
st_points(rbind(st_coordinates(data_sf$geometry[subz][1:(sum(subz)-1)]),c(NA,NA,NA)))
st_point(rbind(st_coordinates(data_sf$geometry[subz][1:(sum(subz)-1)]),c(NA,NA,NA)))
st_sfc(rbind(st_point(c(1,1)),st_point(c(0,0))))
st_as_sf(rbind(st_point(c(1,1)),st_point(c(0,0))))
rbind(st_point(c(1,1)),st_point(c(0,0)))
st_as_sf(st_point(rbind(st_coordinates(data_sf$geometry[subz][1:(sum(subz)-1)]),c(NA,NA,NA))))
st_as_sf(rbind(st_coordinates(data_sf$geometry[subz][1:(sum(subz)-1)]),c(NA,NA,NA)))
st_as_sf(data.frame(rbind(st_coordinates(data_sf$geometry[subz][1:(sum(subz)-1)]),c(NA,NA,NA))))
st_as_sfc(data.frame(rbind(st_coordinates(data_sf$geometry[subz][1:(sum(subz)-1)]),c(NA,NA,NA))))
st_sfc(data.frame(rbind(st_coordinates(data_sf$geometry[subz][1:(sum(subz)-1)]),c(NA,NA,NA))))
st_sfc(st_coordinates(data_sf$geometry[subz][1:(sum(subz)-1)]))
st_as_sf(st_coordinates(data_sf$geometry[subz][1:(sum(subz)-1)]))
st_coordinates(data_sf$geometry[subz][1:(sum(subz)-1)])
st_as_sf(st_coordinates(data_sf$geometry[subz][1:(sum(subz)-1)]), coords = c('X','Y','Z'))
st_as_sf(data.frame(st_coordinates(data_sf$geometry[subz][1:(sum(subz)-1)]), coords = c('X','Y','Z')))
st_as_sf(data.frame(st_coordinates(data_sf$geometry[subz][1:(sum(subz)-1)])), coords = c('X','Y','Z'))
st_as_sf(data.frame(rbind(st_coordinates(data_sf$geometry[subz][1:(sum(subz)-1)])),c(NA,NA,NA)), coords = c('X','Y','Z'))
rbind(st_coordinates(data_sf$geometry[subz][1:(sum(subz)-1)]),c(NA,NA,NA))
st_as_sf(data.frame(rbind(st_coordinates(data_sf$geometry[subz][1:(sum(subz)-1)]),c(NA,NA,NA)), coords = c('X','Y','Z'))
x1 <- rbind(data_sf$geometry[subz][1:(sum(subz)-1)],st_point())
x2 <- rbind(data_sf$geometry[subz][2:sum(subz)])
data$geometry <- mapply(function(x,y) st_linestring(rbind(x, y)), x1[subz], x2[subz], SIMPLIFY = F)
}
####
# Note for tomorrow
# Have to figure out how to order points before calculating
# Particularly for multiple IDs
df3$geometry <- st_sfc(mapply(function(x,y) st_linestring(rbind(x, y)), x1, x2, SIMPLIFY = F))
sf::st_as_sf(
data.frame(
id = seq_len(nrow(data)),
data,
time_traj = new_time_tj(time,id=id,tz=tz),
burst = make_multi_burst(id=id, burst=burst),
error = error
),
coords = coords,
dim = 'XYZ'
)
##############
# Make class
new_sfstep<-
function(data = data.frame(),
proj4 = NA,
time = NA,
id = NA,
burst = NULL,
error = NA,
coords = c('x','y'),
tz = NULL
) {
burst[['id']] <- id
burst_list <- do.call(function(...) mapply(list,...,SIMPLIFY=F), burst)
structure(
sf::st_as_sf(
data.frame(
id = seq_len(nrow(data)),
data,
time_traj = new_time_tj(time,id=id,tz=tz),
burst = make_multi_burst(id=id, burst=burst),
error = error
),
coords = coords,
dim = 'XYZ'
),
projection = proj4,
class = c("sftraj", 'data.frame')
beginning =
end =
)
}
st_as_sf(data.frame(rbind(st_coordinates(data_sf$geometry[subz][1:(sum(subz)-1)]),c(NA,NA,NA))), coords = c('X','Y','Z'))
st_as_sf(data.frame(rbind(st_coordinates(data_sf$geometry[subz][1:(sum(subz)-1)]),c(NA_real_,NA_real_,NA_real_))), coords = c('X','Y','Z'))
st_sfc(rbind(st_point(c(1,1)),st_point(c(0,0))))
st_sfc(c(st_point(c(1,1)),st_point(c(0,0))))
st_sfc(rbind(st_point(c(1,1)),st_point(c(0,0))))
rbind(st_point(c(1,1)),st_point(c(0,0)))
st_point(0:1)
st_sfc(st_point(0:1))
rbind(st_sfc(st_point(0:1)),st_sfc(st_point(0:1)))
st_sfc(data_sf$geometry[subz][1:(sum(subz)-1)])
rbind(st_sfc(data_sf$geometry[subz][1:(sum(subz)-1)]),
st_sfc(st_point()))
x1 <- rbind(st_sfc(data_sf$geometry[subz][1:(sum(subz)-1)]),
st_sfc(st_point()))
x1[1]
x1[2]
x1[3]
x1[4]
a= st_sfc(data_sf$geometry[subz][1:(sum(subz)-1)])
b= st_sfc(st_point(0:1))
rbind(a,b)
x1 <- rbind(a,b)
View(x1)
st_sf(a)
x1 <- rbind(st_sf(a),st_sf(b))
st_sf(a)
st_sf(b)
c(a,b)
x1 <- c(st_sfc(data_sf$geometry[subz][1:(sum(subz)-1)]),st_sfc(st_point()))
x2 <- c(st_sfc(st_point()),st_sfc(data_sf$geometry[subz][2:sum(subz)]))
data$geometry <- mapply(function(x,y) st_linestring(rbind(x, y)), x1, x2, SIMPLIFY = F)
View(x1)
View(x2)
x1 <- data_sf$geometry[subz][1:(sum(subz)-1)]
x2 <- data_sf$geometry[subz][2:sum(subz)]
mapply(function(x,y) st_linestring(rbind(x, y)), x1, x2, SIMPLIFY = F)
subz
if(is.null(data$step_geometry)) { data$step_geometry <- NA}
which.max(subz)
which(subz)
sum(subz)
which(subz)[sum(subz)]
which(subz)
max(which(subz))
subz[-max(which(subz))]
first_point <- min(which(subz))
subz[first_point] <- FALSE
data_sf$step_geometry[subz] <- mapply(function(x,y) st_linestring(rbind(x, y)), x1, x2, SIMPLIFY = F)
View(data_sf)
i <- unique_idz[2]
subz <- sapply(data_sf$burst, function(x) x$id)==i
x1 <- data_sf$geometry[subz][1:(sum(subz)-1)]
x2 <- data_sf$geometry[subz][2:sum(subz)]
first_point <- min(which(subz))
subz[first_point] <- FALSE
data_sf$step_geometry[subz] <- mapply(function(x,y) st_linestring(rbind(x, y)), x1, x2, SIMPLIFY = F)
data_sf$step_geometry[first_point]
st_linestring()
data_sf$step_geometry[first_point] <- st_linestring()
st_linestring()
x1
x1[1]
x1[1]==x1[1]
x1[1]==x1[2]
x1[1]==x1[3]
x3 <- mapply(function(x,y,first_point=first_point) {
st_linestring(rbind(x, y))
}, x1, x2, SIMPLIFY = F)
st_sfc(x3)
c(st_linestring(),st_sfc(x3))
c(st_sfc(st_linestring()),st_sfc(x3))
i <- unique_idz[2]
subz <- sapply(data_sf$burst, function(x) x$id)==i
x1 <- data_sf$geometry[subz][1:(sum(subz)-1)]
x2 <- data_sf$geometry[subz][2:sum(subz)]
first_point <- min(which(subz))
#subz[first_point] <- FALSE
x3 <- mapply(function(x,y,first_point=first_point) {
st_linestring(rbind(x, y))
}, x1, x2, SIMPLIFY = F)
c(st_sfc(st_linestring()),st_sfc(x3))
data_sf$step_geometry[subz] <- c(st_sfc(st_linestring()),st_sfc(x3))
i <- unique_idz[1]
subz <- sapply(data_sf$burst, function(x) x$id)==i
x1 <- data_sf$geometry[subz][1:(sum(subz)-1)]
x2 <- data_sf$geometry[subz][2:sum(subz)]
first_point <- min(which(subz))
#subz[first_point] <- FALSE
x3 <- mapply(function(x,y,first_point=first_point) {
st_linestring(rbind(x, y))
}, x1, x2, SIMPLIFY = F)
data_sf$step_geometry[subz] <- c(st_sfc(st_linestring()),st_sfc(x3))
View(data_sf)
plot(data_sf$step_geometry)
data_sf$step_geometry[subz] <- st_sfc(c(st_sfc(st_linestring()),st_sfc(x3)))
plot(data_sf$step_geometry)
for(i in unique_idz){
#  i <- unique_idz[1]
subz <- sapply(data_sf$burst, function(x) x$id)==i
#We cant actually inject a null point and have it convert to line strong, so we have to deal with that later
x1 <- data_sf$geometry[subz][1:(sum(subz)-1)]
x2 <- data_sf$geometry[subz][2:sum(subz)]
first_point <- min(which(subz))
#subz[first_point] <- FALSE
x3 <- mapply(function(x,y,first_point=first_point) {
st_linestring(rbind(x, y))
}, x1, x2, SIMPLIFY = F)
data_sf$step_geometry[subz] <- st_sfc(c(st_sfc(st_linestring()),st_sfc(x3)))
}
plot(data_sf$step_geometry)
View(data_sf)
str(data_sf)
str(data_sf$step_geometry)
plot(data_sf$geometry)
plot(data_sf$step_geometry)
a = data_sf$step_geometry
b = data_sf$geometry
a = st_sfc(data_sf$step_geometry)
View(a)
a[[14]]
a = st_sfc(data_sf$step_geometry[3:3377])
st_linestring(c(NA_real_, NA_real_,NA_real_))
matrix(numeric(0), 0, 2)
st_linestring(x = matrix(numeric(0), 0, 3), dim = "XYZ")
data_sf$step_geometry[subz] <- st_sfc(c(st_sfc(st_linestring(x = matrix(numeric(0), 0, 3), dim = "XYZ")),st_sfc(x3)))
a = st_sfc(data_sf$step_geometry[1:3377])
for(i in unique_idz){
#  i <- unique_idz[1]
subz <- sapply(data_sf$burst, function(x) x$id)==i
#We cant actually inject a null point and have it convert to line strong, so we have to deal with that later
x1 <- data_sf$geometry[subz][1:(sum(subz)-1)]
x2 <- data_sf$geometry[subz][2:sum(subz)]
first_point <- min(which(subz))
#subz[first_point] <- FALSE
x3 <- mapply(function(x,y,first_point=first_point) {
st_linestring(rbind(x, y))
}, x1, x2, SIMPLIFY = F)
data_sf$step_geometry[subz] <- st_sfc(c(st_sfc(st_linestring(x = matrix(numeric(0), 0, 3), dim = "XYZ")),st_sfc(x3)))
}
st_linestring(c(NA_real_, NA_real_,NA_real_))
st_linestring(x = matrix(numeric(0), 0, 3), dim = "XYZ")
a = st_sfc(data_sf$step_geometry[1:3377])
b = data_sf$geometry
plot(data_sf$step_geometry)
plot(data_sf$data_sf$step_geometry[3:3377])
plot(data_sf$data_sf$step_geometry[1:3377])
plot(data_sf$data_sf$step_geometry[2:3377])
plot(data_sf$data_sf$step_geometry[4:3377])
plot(data_sf$data_sf$step_geometry[4:3388])
plot(a)
plot(a[3:5])
plot(a[3:1000])
for(i in unique_idz){
#  i <- unique_idz[1]
subz <- sapply(data_sf$burst, function(x) x$id)==i
#We cant actually inject a null point and have it convert to line strong, so we have to deal with that later
x1 <- data_sf$geometry[subz][1:(sum(subz)-1)]
x2 <- data_sf$geometry[subz][2:sum(subz)]
first_point <- min(which(subz))
#subz[first_point] <- FALSE
x3 <- mapply(function(x,y,first_point=first_point) {
st_linestring(rbind(x, y))
}, x1, x2, SIMPLIFY = F)
data_sf$step_geometry[subz] <- c(st_sfc(st_linestring(x = matrix(numeric(0), 0, 3), dim = "XYZ")),st_sfc(x3))
}
data_sf$step_geometry <- st_sfc(data_sf$step_geometry)
summary(data_sf)
a = data_sf$step_geometry
plot([3:1000])
plot(b[3:1000])
sf::st_sf(
data.frame(
id = seq_len(nrow(data)),
data_sf,
time_traj = new_time_tj(time,id=id,tz=tz),
burst = make_multi_burst(id=id, burst=burst),
error = error
),
geometry=data_sf$step_geometry
)
time=timez
id=idz
sf::st_sf(
data_sf,
geometry=data_sf$step_geometry
)
data_sf1 <- sf::st_sf(
data_sf,
geometry=data_sf$step_geometry
)
plot(data_sf1)
plot(data_sf1[3:3337,])
data_sf <- new_sftraj(data, time =time, id = id,
error = NA, coords = coords, tz = 'UTC',
burst = burstz)
coords = c('longitude', 'latitude')
data_sf <- new_sftraj(data, time =time, id = id,
error = NA, coords = coords, tz = 'UTC',
burst = burstz)
data_df$time
data_sf$time
order(data_sf$time)
torder <- order(data_sf$time)
data_sf <- data_sf[torder,]
data_sf$burst
sapply(data_sf$burst, function(x) x$id)
table(sapply(data_sf$burst, function(x) x$id))
idz <- table(sapply(data_sf$burst, function(x) x$id))
idz <- levels(sapply(data_sf$burst, function(x) x$id))
idz <- sapply(data_sf$burst, function(x) x$id)
unique_idz <- levels(idz)[table(idz)>0]
length(data_sf)
rep(NA,nrow(data_sf))
step_geometry <- rep(NA,nrow(data_sf))
for(i in unique_idz){
#  i <- unique_idz[1]
subz <- sapply(data_sf$burst, function(x) x$id)==i
#We cant actually inject a null point and have it convert to line string, so we have to deal with that later
x1 <- data_sf$geometry[subz][1:(sum(subz)-1)]
x2 <- data_sf$geometry[subz][2:sum(subz)]
first_point <- min(which(subz))
#subz[first_point] <- FALSE
x3 <- mapply(function(x,y,first_point=first_point) {
st_linestring(rbind(x, y))
}, x1, x2, SIMPLIFY = F)
step_geometry[subz] <- c(st_sfc(st_linestring(x = matrix(numeric(0), 0, 3), dim = "XYZ")),st_sfc(x3))
}
View(step_geometry)
st_sfc(step_geometry)
# Make a step geometry
function(burst = data_sf$burst, geometry = data_sf$geometry){
# Need to check if time is ordered, if not throw an error
burst = data_sf$burst
idz <- sapply(burst, function(x) x$id)
unique_idz <- levels(idz)[table(idz)>0]
step_geometry <- rep(NA,length(geometry))
for(i in unique_idz){
#  i <- unique_idz[1]
subz <- idz==i
#We cant actually inject a null point and have it convert to line string, so we have to deal with that later
x1 <- geometry[subz][1:(sum(subz)-1)]
x2 <- geometry[subz][2:sum(subz)]
first_point <- min(which(subz))
#subz[first_point] <- FALSE
x3 <- mapply(function(x,y) { st_linestring(rbind(x, y)) }, x1, x2, SIMPLIFY = F)
step_geometry[subz] <- c(st_sfc(st_linestring(x = matrix(numeric(0), 0, 3), dim = "XYZ")),st_sfc(x3))
}
return(st_sfc(step_geometry))
}
# Make a step geometry
make_step_geom <- function(burst = data_sf$burst, geometry = data_sf$geometry){
# Need to check if time is ordered, if not throw an error
burst = data_sf$burst
idz <- sapply(burst, function(x) x$id)
unique_idz <- levels(idz)[table(idz)>0]
step_geometry <- rep(NA,length(geometry))
for(i in unique_idz){
#  i <- unique_idz[1]
subz <- idz==i
#We cant actually inject a null point and have it convert to line string, so we have to deal with that later
x1 <- geometry[subz][1:(sum(subz)-1)]
x2 <- geometry[subz][2:sum(subz)]
first_point <- min(which(subz))
#subz[first_point] <- FALSE
x3 <- mapply(function(x,y) { st_linestring(rbind(x, y)) }, x1, x2, SIMPLIFY = F)
step_geometry[subz] <- c(st_sfc(st_linestring(x = matrix(numeric(0), 0, 3), dim = "XYZ")),st_sfc(x3))
}
return(st_sfc(step_geometry))
}
make_step_geom*()
make_step_geom()
geometry = data_sf$geometry
burst = data_sf$burst
burst = data_sf$burst
idz <- sapply(burst, function(x) x$id)
unique_idz <- levels(idz)[table(idz)>0]
step_geometry <- rep(NA,length(geometry))
for(i in unique_idz){
#  i <- unique_idz[1]
subz <- idz==i
#We cant actually inject a null point and have it convert to line string, so we have to deal with that later
x1 <- geometry[subz][1:(sum(subz)-1)]
x2 <- geometry[subz][2:sum(subz)]
first_point <- min(which(subz))
#subz[first_point] <- FALSE
x3 <- mapply(function(x,y) { st_linestring(rbind(x, y)) }, x1, x2, SIMPLIFY = F)
step_geometry[subz] <- c(st_sfc(st_linestring(x = matrix(numeric(0), 0, 3), dim = "XYZ")),st_sfc(x3))
}
View(data.frame(step_geometry))
View(data.frame(p =step_geometry))
data.frame(p =step_geometry)
View(step_geometry)
coords = c('longitude', 'latitude','height')
data_sf <- new_sftraj(data, time =time, id = id,
error = NA, coords = coords, tz = 'UTC',
burst = burstz)
make_step_geom()
# Introduction to R
## Why use R?
# www.github.com/embruna/refsplitr
library(refsplitr)
library(ggmap)
references <- references_read('/home/matt/Documents/Workshops/Hendrix2020/BITR', dir=T)
authors <- authors_clean(references)
authors <- authors_refine(authors$review, authors$prelim, sim_score = 0.9)
data_georef <- authors_georef(authors)
write.csv(data_georef,'/home/matt/Documents/Workshops/Hendrix2020/BITR_georef.csv',row.names=F)
write.csv(data_georef$addresses,'/home/matt/Documents/Workshops/Hendrix2020/BITR_georef.csv',row.names=F)
#BITR_georef <- authors_georef(authors)
BITR_georef <- read.csv('/home/matt/Documents/Workshops/Hendrix2020/BITR_georef.csv',stringAsFactors=F)
#BITR_georef <- authors_georef(authors)
BITR_georef <- read.csv('/home/matt/Documents/Workshops/Hendrix2020/BITR_georef.csv',stringsAsFactors=F)
plot_net_country(BITR_georef)
data(BITR_geocode)
plot_net_country(BITR_geocode)
plot_net_country(BITR_georef)
plot_net_country(BITR_georef[1:1000,])
plot_net_country(BITR_georef[1:100,])
p <- plot_net_country(BITR_georef[1:100,])
p$plot
p <- plot_net_country(BITR_georef[1:1000,])
p <- plot_net_country(BITR_georef[1:500,])
p <- plot_net_country(BITR_georef[1:300,])
p <- plot_net_country(BITR_georef[1:200,])
p$plot
p <- plot_net_country(BITR_georef[1:2500,])
p <- plot_net_country(BITR_georef[1:250,])
p <- plot_net_country(BITR_georef[1:240,])
p$plot
p <- plot_net_country(BITR_georef[1:250,])
p$plot
p <- plot_net_country(BITR_georef[1:250,])
p <- plot_net_country(BITR_georef[1:240,])
View(BITR_georef)
write.csv(data_georef$not_missing_addresses,'/home/matt/Documents/Workshops/Hendrix2020/BITR_georef.csv',row.names=F)
#BITR_georef <- authors_georef(authors)
BITR_georef <- read.csv('/home/matt/Documents/Workshops/Hendrix2020/BITR_georef.csv',stringsAsFactors=F)
p <- plot_net_country(BITR_georef[1:240,])
p <- plot_net_country(BITR_georef[1:2000,])
p$plot
View(BITR_georef)
p <- plot_net_country(BITR_georef[1:100,])
p <- plot_net_country(BITR_georef[1:300,])
p <- plot_net_country(BITR_georef[1:400,])
p <- plot_net_country(BITR_georef[1:500,])
p <- plot_net_country(BITR_georef[1:600,])
p <- plot_net_country(BITR_georef[1:800,])
p <- plot_net_country(BITR_georef[1:1000,])
p <- plot_net_country(BITR_georef[1:9000,])
p <- plot_net_country(BITR_georef[1:900,])
setwd('/home/matt/r_programs/Hendrix_2020')
library(ggplot2)
data <- matrix(1:100)
View(data)
library("broom", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.6")
